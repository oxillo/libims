version: 1.0.{build}

image:
  - Visual Studio 2017

environment:
  APPVEYOR_RDP_PASSWORD: $lib1MS
  global:
    APPVEYOR_OS_NAME: windows
  matrix:
  #MSYS2 Building
    - platform: x86
      BUILDER: MSYS2
      MSYSTEM: MINGW32
      WORDSIZE: i686
    - platform: x64
      BUILDER: MSYS2
      MSYSTEM: MINGW32
      WORDSIZE: i686
    - platform: x64
      BUILDER: MSYS2
      MSYSTEM: MINGW64
      WORDSIZE: x86_64
  #Documentation
    - platform: x86
      BUILDER: DOC
      MSYSTEM: MINGW32

artifacts:
  - path: 'build/**/LIBIMS-*.exe'

  #VisualStudio Building
#    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
#      platform: x86
#      BUILDER : VS
#      BITS: 32
#    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
#      platform: x64
#      BUILDER : VS
#      BITS: 64

configuration: 
  - Debug

shallow_clone: true
clone_depth: 10

init:

# fix for https://github.com/appveyor/ci/issues/2571
#- del C:\Windows\System32\libssl-*.dll C:\Windows\system32\libcrypto-*.dll
#- del C:\Windows\SysWOW64\libssl-*.dll C:\Windows\SysWOW64\libcrypto-*.dll
- set MSYS2_PATH=c:\msys64
- set CHERE_INVOKING=1
#- if "%BUILDER%_%PLATFORM%"=="MSYS2_x86" set MSYSTEM=MINGW32
#- if "%BUILDER%_%PLATFORM%"=="MSYS2_x64" set MSYSTEM=MINGW64
#- '%MSYS2_PATH%\usr\bin\bash -lc "pacman --noconfirm --needed -Sy bash pacman pacman-mirrors msys2-runtime msys2-runtime-devel"'
- if "%BUILDER%"=="DOC" (%MSYS2_PATH%\usr\bin\bash -lc "pacman --noconfirm -S --needed 
      ${MINGW_PACKAGE_PREFIX}-cmake
      ${MINGW_PACKAGE_PREFIX}-doxygen
      ${MINGW_PACKAGE_PREFIX}-graphviz
      ${MINGW_PACKAGE_PREFIX}-asciidoctor")
- if "%BUILDER%"=="MSYS2" (%MSYS2_PATH%\usr\bin\bash -lc "pacman --noconfirm -S --needed 
      ${MINGW_PACKAGE_PREFIX}-cmake
      ${MINGW_PACKAGE_PREFIX}-libxml2
      ${MINGW_PACKAGE_PREFIX}-lcov
      ${MINGW_PACKAGE_PREFIX}-nsis")
- set PRJ_PATH=%CD%
- set BUILD_PATH=%CD%\build\%MSYSTEM%\%PLATFORM%
- set INSTALL_PATH=%CD%/install
#- if "%BUILDER%"=="VS" set PATH=%ProgramFiles(x86)%\Microsoft Visual Studio\2017\Community\MSBuild\15.0\Bin;%PATH%

# - IF "%BUILDER%"=="VS" set PATH=C:\Program Files (x86)\MSBuild\14.0\Bin;%PATH%

cache:
    - .ccache
    - c:\msys64\var\cache

install:
#- if "%BUILDER%"=="VS" (%MSYS2_PATH%\usr\bin\bash -lc "scripts/ci/vs/install.sh")
#- if "%BUILDER%"=="MSYS2" (%MSYS2_PATH%\usr\bin\bash -lc "cd scripts && ./install.sh")
- if "%BUILDER%"=="DOC" (%MSYS2_PATH%\usr\bin\bash -lc "gem install asciidoctor-diagram") 

before_build:
#- set INSTALL_PATH=%CD%/install/${OS}/${WORDSIZE};
- if "%BUILDER%"=="MSYS2" (%MSYS2_PATH%\usr\bin\bash -lc "mkdir -p $BUILD_PATH && cd $BUILD_PATH && cmake $PRJ_PATH -G\"Unix Makefiles\" 
      -DCMAKE_BUILD_TYPE=${CONFIGURATION}
      -DCMAKE_INSTALL_PREFIX=${INSTALL_PATH} 
      -DWORDSIZE=${WORDSIZE} 
      -DENABLE_DOC=0 
      -DENABLE_TEST=0
      -DENABLE_INSTRUMENTATION=0 ")
- if "%BUILDER%"=="DOC" (%MSYS2_PATH%\usr\bin\bash -lc "mkdir -p $BUILD_PATH && cd $BUILD_PATH && cmake $PRJ_PATH -G\"Unix Makefiles\" 
      -DCMAKE_BUILD_TYPE=${CONFIGURATION}
      -DCMAKE_INSTALL_PREFIX=${INSTALL_PATH} 
      -DWORDSIZE=${WORDSIZE} 
      -DENABLE_DOC=1 
      -DENABLE_TEST=0
      -DENABLE_INSTRUMENTATION=0 ")
#  DENABLE_INSTRUMENTATION=${ENABLE_INSTRUMENTATION}
#- if "%BUILDER%"=="MSYS2" (%MSYS2_PATH%\usr\bin\bash -lc "ccache -z")
#- if "%BUILDER%"=="MSYS2" (%MSYS2_PATH%\usr\bin\bash -lc "ccache -s")

build_script:
- if "%BUILDER%"=="MSYS2" (%MSYS2_PATH%\usr\bin\bash -lc "cmake --build $BUILD_PATH --target package --config ${CONFIGURATION}")
- if "%BUILDER%"=="DOC" (
    %MSYS2_PATH%\usr\bin\bash -lc "cmake --build $BUILD_PATH --target asciidoctor --config ${CONFIGURATION}"
    %MSYS2_PATH%\usr\bin\bash -lc "cmake --build $BUILD_PATH --target doc --config ${CONFIGURATION}"
    )
#- ps: |
#    if ($env:BUILDER -eq "VS") {
#      msbuild libs/openFrameworksCompiled/project/vs/openframeworksLib.vcxproj  /verbosity:minimal /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll"
#      msbuild examples/templates/emptyExample/emptyExample.vcxproj  /verbosity:minimal /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll"
#      msbuild examples/templates/allAddonsExample/allAddonsExample.vcxproj  /verbosity:minimal /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll"
#    }

before_test:
- if "%BUILDER%"=="MSYS2" (%MSYS2_PATH%\usr\bin\bash -lc "mkdir -p tests && cd tests && cmake .. -G\"Unix Makefiles\" 
      -DCMAKE_BUILD_TYPE=${CONFIGURATION}
      -DCMAKE_INSTALL_PREFIX=${INSTALL_PATH} 
      -DWORDSIZE=${WORDSIZE} 
      -DENABLE_DOC=0 
      -DENABLE_TEST=1
      -DENABLE_INSTRUMENTATION=0 ")
- if "%BUILDER%"=="MSYS2" (%MSYS2_PATH%\usr\bin\bash -lc "cmake --build tests --target all --config ${CONFIGURATION}")
#- if "%BUILDER%"=="MSYS2" (%MSYS2_PATH%\usr\bin\bash -lc "cmake --build build --target precoverage --config ${CONFIGURATION}")

test_script:
- if "%BUILDER%"=="MSYS2" (%MSYS2_PATH%\usr\bin\bash -lc "cmake --build tests --target test --config ${CONFIGURATION}")
#- if "%BUILDER%"=="MSYS2" (%MSYS2_PATH%\usr\bin\bash -lc "scripts/ci/msys2/run_tests.sh")
#- ps: |
#    if ($env:BUILDER -eq "VS") {
#      cd scripts/ci/vs
#      .\run_tests.bat
#    }

after_test:
#- if "%BUILDER%"=="MSYS2" (%MSYS2_PATH%\usr\bin\bash -lc "cmake --build build --target postcoverage --config ${CONFIGURATION}")
#  - if "%BUILDER%"=="MSYS2" (%MSYS2_PATH%\usr\bin\bash -lc "ccache -s")

on_finish:
#- ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
